import{_ as a,o,c as n,S as e}from"./chunks/framework.72045731.js";const D=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/guide/faq.md","filePath":"zh_CN/guide/faq.md"}'),l={name:"zh_CN/guide/faq.md"};function p(r,s,t,c,i,y){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="如何备份和恢复数据库" tabindex="-1">如何备份和恢复数据库? <a class="header-anchor" href="#如何备份和恢复数据库" aria-label="Permalink to &quot;如何备份和恢复数据库?&quot;">​</a></h2><p>QD 默认使用 <strong>sqlite3</strong> 作为框架数据库，<code>database.db</code> 文件保存在 <code>config</code> 目录下。使用 Docker 容器部署时，可以使用 <code>docker cp</code> 命令备份数据库文件，然后使用 <code>docker cp</code> 命令在新容器中恢复数据库文件。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 数据库备份</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">container_name:/usr/src/app/config/database.db</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 数据库恢复</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">database.db</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">container_name:/usr/src/app/config/</span></span></code></pre></div><h2 id="如何在-docker-中配置邮箱服务器" tabindex="-1">如何在 Docker 中配置邮箱服务器? <a class="header-anchor" href="#如何在-docker-中配置邮箱服务器" aria-label="Permalink to &quot;如何在 Docker 中配置邮箱服务器?&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">qd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">8923</span><span style="color:#C3E88D;">:80</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/qd/config:/usr/src/app/config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">MAIL_SMTP=STMP服务器</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">MAIL_PORT=邮箱服务器端口</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">MAIL_USER=用户名</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">MAIL_PASSWORD=密码</span><span style="color:#BABED8;">  </span><span style="color:#C3E88D;">--env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">DOMAIN=域名</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">qdtoday/qd</span></span></code></pre></div><h2 id="如何在-docker-中使用-mysql" tabindex="-1">如何在 Docker 中使用 MySQL? <a class="header-anchor" href="#如何在-docker-中使用-mysql" aria-label="Permalink to &quot;如何在 Docker 中使用 MySQL?&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">qd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">8923</span><span style="color:#C3E88D;">:80</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/qd/config:/usr/src/app/config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--ENV</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">DB_TYPE=mysql</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--ENV</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">JAWSDB_MARIA_URL=mysql://用户名:密码@hostname:port/数据库名</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">qdtoday/qd</span></span></code></pre></div><h2 id="如何自己搭建-docker-镜像" tabindex="-1">如何自己搭建 Docker 镜像? <a class="header-anchor" href="#如何自己搭建-docker-镜像" aria-label="Permalink to &quot;如何自己搭建 Docker 镜像?&quot;">​</a></h2><p>请参考此镜像的构建文件 <a href="https://github.com/qd-today/qd/blob/master/Dockerfile" target="_blank" rel="noreferrer">Dockerfile</a>。</p><h2 id="如何查看当前框架支持的-api-和-jinja2-模板变量" tabindex="-1">如何查看当前框架支持的 API 和 Jinja2 模板变量? <a class="header-anchor" href="#如何查看当前框架支持的-api-和-jinja2-模板变量" aria-label="Permalink to &quot;如何查看当前框架支持的 API 和 Jinja2 模板变量?&quot;">​</a></h2><p>请进入框架首页，然后点击左上角的 <code>常用 API/过滤器</code> 按钮，可以查看当前框架支持的 API 和 Jinja2 模板变量。</p><h2 id="如何提交-bug-问题" tabindex="-1">如何提交 bug 问题? <a class="header-anchor" href="#如何提交-bug-问题" aria-label="Permalink to &quot;如何提交 bug 问题?&quot;">​</a></h2><p>请在遇到问题后开启 <code>Debug</code> 模式，然后将详细的错误日志提交至 <a href="https://github.com/qd-today/qd/issues" target="_blank" rel="noreferrer">Issue</a>。</p><h2 id="qd-模板一般需要哪些请求" tabindex="-1">QD 模板一般需要哪些请求? <a class="header-anchor" href="#qd-模板一般需要哪些请求" aria-label="Permalink to &quot;QD 模板一般需要哪些请求?&quot;">​</a></h2><p>根据经验，以下请求是必要的：</p><ul><li>登录页面</li><li>发布到登录页面</li><li>发起 用户名、密码 请求</li><li>发送后导致页面跳转的页面</li><li>翻页前后的第一个网页</li></ul><h2 id="我的用户名和密码会被泄露吗" tabindex="-1">我的用户名和密码会被泄露吗? <a class="header-anchor" href="#我的用户名和密码会被泄露吗" aria-label="Permalink to &quot;我的用户名和密码会被泄露吗?&quot;">​</a></h2><p>为了帮助用户发起请求，终究需要记录用户名和密码。这只能靠服务器维护人员的自律来保证后端数据的安全。但在框架设计中，每个用户在存储时都使用安全密钥进行加密。使用密钥对用户数据进行加密，可以保证仅获取数据库就无法解密用户数据。（加密的用户数据包括用户上传的模板、用户为任务设置的变量等）</p><p>如果还是不放心，可以自己搭建 QD 框架，下载模板在自己的服务器上运行。</p><h2 id="提示错误信息-permissionerror-errno-1-operation-not-permitted" tabindex="-1">提示错误信息 <code>PermissionError: [Errno 1] Operation not permitted</code>? <a class="header-anchor" href="#提示错误信息-permissionerror-errno-1-operation-not-permitted" aria-label="Permalink to &quot;提示错误信息 \`PermissionError: [Errno 1] Operation not permitted\`?&quot;">​</a></h2><ol><li><p>如果是 ARM32 Debian 系统, 请检查 <code>Docker</code> 版本是否小于 <code>20.10.0</code>, 且 <code>libseccomp</code> 版本是否小于 <code>2.4.4</code>, 如果是的话, 请升级以上组件.</p><p>更新 <code>libseccomp</code> 参考操作:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Get signing keys to verify the new packages, otherwise they will not install</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">apt-key</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">adv</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--keyserver</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">keyserver.ubuntu.com</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--recv-keys</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">04</span><span style="color:#C3E88D;">EE7237B7D453EC</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">648</span><span style="color:#C3E88D;">ACFD622F3D138</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Add the Buster backport repository to apt sources.list</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deb http://httpredir.debian.org/debian buster-backports main contrib non-free</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">sudo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">tee</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/etc/apt/sources.list.d/debian-backports.list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">update</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">libseccomp2</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">buster-backports</span></span></code></pre></div><blockquote><p>来源于:</p><ul><li><a href="https://github.com/Taxel/PlexTraktSync/pull/474" target="_blank" rel="noreferrer">https://github.com/Taxel/PlexTraktSync/pull/474</a></li><li><a href="https://stackoverflow.com/questions/70195968/dockerfile-raspberry-pi-python-pip-install-permissionerror-errno-1-operation" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/70195968/dockerfile-raspberry-pi-python-pip-install-permissionerror-errno-1-operation</a></li></ul></blockquote></li><li><p>请检查是否将容器内的 <code>/usr/src/app</code> 目录映射至容器外部.</p><blockquote><p>请注意框架仅需映射 <code>/usr/src/app/config</code> 目录即可.</p></blockquote></li></ol><h2 id="提示警告信息-connect-redis-falied-error-10061" tabindex="-1">提示警告信息: <code>Connect Redis falied: Error 10061</code> <a class="header-anchor" href="#提示警告信息-connect-redis-falied-error-10061" aria-label="Permalink to &quot;提示警告信息: \`Connect Redis falied: Error 10061\`&quot;">​</a></h2><p>QD 使用 <code>redis</code> 作为限流工具，如果没有安装 <code>redis</code> 服务，框架会提示以下警告信息。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">W xxxxxx xx:xx:xx QD.RedisDB redisdb:28</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> Connect Redis falied: Error 10061 connecting to localhost:6379. 由于目标计算机积极拒绝，无法连接。</span></span></code></pre></div><p>然而，<code>redis</code> 在框架中并不是必须的，如果你不需要使用 <code>限流</code> 功能，可以忽略该警告信息。</p><blockquote><p>建议使用 <code>Docker compose</code> 部署 QD 框架, Docker compose 配置已默认安装 redis 容器。</p></blockquote><h2 id="提示警告信息-import-pycurl-module-falied" tabindex="-1">提示警告信息: <code>Import PyCurl module falied</code> <a class="header-anchor" href="#提示警告信息-import-pycurl-module-falied" aria-label="Permalink to &quot;提示警告信息: \`Import PyCurl module falied\`&quot;">​</a></h2><p>QD 使用 <code>pycurl</code> 模块来发送 HTTP Proxy 请求。如果没有安装 <code>pycurl</code> 模块，框架会提示以下警告信息。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">W xxxxxx xx:xx:xx QD.Http.Fetcher fetcher:34</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> Import PyCurl module falied: No module named </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pycurl</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>然而，<code>pycurl</code> 在框架中并不是必须的，如果你不需要使用 <code>Proxy</code> 功能，可以忽略该警告信息。</p><blockquote><p><code>pycurl</code> 模块在 Windows 系统上安装比较麻烦，需要安装 <code>libcurl</code> 库，具体安装方法请参考 <a href="http://pycurl.io/docs/latest/install.html" target="_blank" rel="noreferrer">pycurl 官方文档</a>。</p><p>建议使用容器或 linux 系统部署 QD 框架, Docker 容器已预装 Curl 环境, 默认安装 pycurl 模组。</p></blockquote><h2 id="如何注册推送方式" tabindex="-1">如何注册推送方式 <a class="header-anchor" href="#如何注册推送方式" aria-label="Permalink to &quot;如何注册推送方式&quot;">​</a></h2><p>你可以在 <code>工具箱</code>-&gt;<code>推送注册</code>中注册不同的推送工具，以便在发生特定事件（例如定时任务执行失败）时向你推送通知</p><p>请参考 <a href="/qd/zh_CN/toolbox/pusher.html">推送工具</a></p><h2 id="公共模板更新页面提示错误代码为-undefined" tabindex="-1">公共模板更新页面提示错误代码为 undefined <a class="header-anchor" href="#公共模板更新页面提示错误代码为-undefined" aria-label="Permalink to &quot;公共模板更新页面提示错误代码为 undefined&quot;">​</a></h2><ul><li><a href="https://github.com/qd-today/qd/issues/423" target="_blank" rel="noreferrer">issue#423</a></li></ul><blockquote><p>公共模板更新页面提示错误代码为 undefined, 或者控制台显示 WebSocket 连接 failed 但不显示错误原因</p></blockquote><p>请检查反向代理相关配置是否正确, 参考 <a href="https://blog.csdn.net/tiven_/article/details/126126442" target="_blank" rel="noreferrer">Nginx 反向代理 WebSocket 服务连接报错</a></p><blockquote><p>参考配置如下:</p><div class="language-Nginx"><button title="Copy Code" class="copy"></button><span class="lang">Nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#BABED8;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;"># 自行修改 server_name</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#BABED8;">qd.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">location</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#BABED8;">http://ip:port</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># WebSocket 关键配置 开始</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_http_version </span><span style="color:#BABED8;">1.1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;">Upgrade </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_upgrade</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;">Connection </span><span style="color:#C3E88D;">&quot;upgrade&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># WebSocket 关键配置 结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># 其他可选配置 开始</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;"> Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;"> X-Real-IP  </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;"> X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#BABED8;"> X-Forwarded-Proto  </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># 其他可选配置 结束</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre></div></blockquote><h2 id="错误代码-4006" tabindex="-1">错误代码：4006 <a class="header-anchor" href="#错误代码-4006" aria-label="Permalink to &quot;错误代码：4006&quot;">​</a></h2><blockquote><p>提示错误信息为：&quot;更新失败，原因：Cannot connect to host xxx.xxx:443 ssl:False&quot;</p></blockquote><p>报错原因：Github 或 GitHub 加速源无法连接。</p><p>解决方法 1：使用代理</p><p>解决方法 2：更换 Github 加速源</p><p>容器的环境变量中增加/修改 <code>SUBSCRIBE_ACCELERATE_URL=https://xxx.xxx/https://raw.githubusercontent.com/</code><code>https://xxx.xxx/</code> 替换为可用的加速源，找不到加速源的可以参考 <a href="https://ghproxy.link" target="_blank" rel="noreferrer">https://ghproxy.link</a> 或 <a href="https://gh-proxy.com" target="_blank" rel="noreferrer">https://gh-proxy.com</a> 中发布的加速源</p>`,46)]))}const B=a(l,[["render",p]]);export{D as __pageData,B as default};
